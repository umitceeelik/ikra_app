import 'package:hive_flutter/hive_flutter.dart';
import 'package:ikra/core/hive_boxes.dart';
import 'package:ikra/data/models/ayah.dart';
import 'package:ikra/data/models/bookmark.dart';
import 'package:ikra/data/models/reading_progress.dart';
import 'package:ikra/data/models/surah.dart';
import 'package:ikra/domain/entities/ayah.dart';
import 'package:ikra/domain/entities/bookmark.dart';
import 'package:ikra/domain/entities/reading_progress.dart';
import 'package:ikra/domain/entities/surah.dart';

/// Local data source powered by Hive.
/// Responsible for: initializing Hive, opening boxes, and simple reads/writes.
class QuranLocalDataSource {
  /// Call on app startup: initializes Hive, registers adapters, opens boxes.
  Future<void> init() async {
    await Hive.initFlutter(); // Prepare platform paths

    // Register adapters generated by build_runner
    Hive
      ..registerAdapter(SurahHiveAdapter())
      ..registerAdapter(AyahHiveAdapter())
      ..registerAdapter(ReadingProgressHiveAdapter())
      ..registerAdapter(BookmarkHiveAdapter());

    // Open typed boxes so we get type-safe reads/writes
    await Hive.openBox<SurahHive>(HiveBoxes.surahs);
    await Hive.openBox<AyahHive>(HiveBoxes.ayahs);
    await Hive.openBox<ReadingProgressHive>(HiveBoxes.progress);
    await Hive.openBox<BookmarkHive>(HiveBoxes.bookmarks);
  }

  // ------------------------
  // Seed & read Qur'an text
  // ------------------------

  bool isEmpty() {
    final s = Hive.box<SurahHive>(HiveBoxes.surahs);
    final a = Hive.box<AyahHive>(HiveBoxes.ayahs);
    return s.isEmpty || a.isEmpty;
  }

  Future<void> writeAll({
    required List<SurahHive> surahs,
    required List<AyahHive> ayahs,
  }) async {
    final s = Hive.box<SurahHive>(HiveBoxes.surahs);
    final a = Hive.box<AyahHive>(HiveBoxes.ayahs);

    await s.clear();
    await a.clear();

    await s.addAll(surahs);
    await a.addAll(ayahs);
  }

  List<Surah> getSurahList() {
    final s = Hive.box<SurahHive>(HiveBoxes.surahs);
    return s.values.map((e) => e.toEntity()).toList()
      ..sort((a, b) => a.number.compareTo(b.number));
  }

  List<Ayah> getAyatBySurah(int surah) {
    final a = Hive.box<AyahHive>(HiveBoxes.ayahs);
    final list = a.values.where((x) => x.surah == surah).toList()
      ..sort((p, q) => p.numberInSurah.compareTo(q.numberInSurah));
    return list.map((e) => e.toEntity()).toList();
  }

  // ------------------------
  // Reading progress (single)
  // ------------------------

  ReadingProgress? getReadingProgress() {
    final box = Hive.box<ReadingProgressHive>(HiveBoxes.progress);
    if (box.isEmpty) return null;
    final latest = box.values.toList()
      ..sort((a, b) => b.updatedAt.compareTo(a.updatedAt));
    return latest.first.toEntity();
  }

  Future<void> setReadingProgress(ReadingProgress progress) async {
    final box = Hive.box<ReadingProgressHive>(HiveBoxes.progress);
    await box.clear(); // keep a single record
    await box.add(ReadingProgressHive.fromEntity(progress));
  }

  // ------------------------
  // Bookmarks (many)
  // ------------------------

  List<Bookmark> getBookmarks() {
    final box = Hive.box<BookmarkHive>(HiveBoxes.bookmarks);
    final items = box.values.toList()
      ..sort((a, b) => b.savedAt.compareTo(a.savedAt));
    return items.map((e) => e.toEntity()).toList();
  }

  bool isBookmarked(int surah, int ayah) {
    final box = Hive.box<BookmarkHive>(HiveBoxes.bookmarks);
    return box.values.any((b) => b.surah == surah && b.ayah == ayah);
  }

  Future<void> toggleBookmark(int surah, int ayah) async {
    final box = Hive.box<BookmarkHive>(HiveBoxes.bookmarks);
    // If exists -> remove; if not -> add
    final existingKey = box.keys.firstWhere(
      (k) {
        final b = box.get(k) as BookmarkHive;
        return b.surah == surah && b.ayah == ayah;
      },
      orElse: () => null,
    );

    if (existingKey != null) {
      await box.delete(existingKey);
    } else {
      await box.add(
        BookmarkHive()
          ..surah = surah
          ..ayah = ayah
          ..savedAt = DateTime.now(),
      );
    }
  }
}
